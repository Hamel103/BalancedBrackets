import java.util.*;

class TestClass {
    public static void main(String args[] ) throws Exception {

        Scanner s = new Scanner(System.in);

        int numInputs = s.nextInt();
        
        if (numInputs<1 || numInputs>7){
            System.out.println("Value enterred is not allowed.");
            System.exit(0);
        }
        
        String testCases[] = new String[numInputs];
        
        for (int i=0; i<numInputs; i++){
            testCases[i] = s.next();
            if (BracketCheck(testCases[i]) == false){
                System.out.println("The string at line " + (i+2) + " contained something other than a bracket.");
                System.out.println("Please reenter the data correctly.");
                System.exit(0);
            }
            System.out.println(BalancedBrackets(testCases[i]));
        }
    }
    
    //Checks if the string has anything other than the brackets.
    public static boolean BracketCheck(String myString)
    {
        int count = 0;
        for (int i=0; i<myString.length(); i++){
            if (myString.charAt(i) == '(' || myString.charAt(i) == ')'){
                count += 1;
            }
        }
        
        boolean myBool;
        if (count == myString.length()){
            myBool = true;
        }
        else{
            myBool = false;
        }
        
        return myBool;
    }
    
    //Finds the largest sent of uninterrupted brackets.
    public static int BalancedBrackets(String myString)
    {
        int countOpen = 0;
        int countClosed = 0;
        int largestCount = 0;
        
        for (int i=0; i<myString.length(); i++)
        {
            if (i >= 1)
            {
                if (myString.charAt(i-1) == ')' && myString.charAt(i) == '(')
                {
                    countOpen = 0;
                    countClosed = 0;
                }
            }
            
            if (myString.charAt(i) == '('){
                countOpen += 1;
            }
            else if (myString.charAt(i) == ')'){
                countClosed += 1;
            }
            
            if (countClosed <= countOpen && largestCount < (countClosed*2)){
                largestCount = countClosed*2;
            }
        }
        
        return largestCount;
    }
}
